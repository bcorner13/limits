require 'spec_helper'

describe 'limits_test_cookbook::basic' do
  subject do
    ChefSpec::SoloRunner.new(step_into: %w[limits_config]) do |node|
      allow(node).to receive(:name).and_return('limits-test-node')
    end.converge(described_recipe)
  end

  it do
    is_expected.to create_limits_config('alice')
      .with(
        limits: [
          { domain: 'alice', type: 'hard', item: 'nofile', value: 500 },
          { domain: 'alice', type: 'soft', item: 'nofile', value: 250 }
        ]
      )
  end

  it do
    is_expected.to create_directory('conf directory for alice')
      .with(
        path: '/etc/security/limits.d',
        owner: 'root',
        group: 'root',
        mode: 0o755,
        recursive: true
      )
  end

  it do
    is_expected.to create_template('/etc/security/limits.d/alice.conf')
      .with(
        cookbook: 'limits',
        source: 'limits.d.conf.erb',
        owner: 'root',
        group: 'root',
        mode: 0o644,
        variables: {
          valid_limits: ['alice hard nofile 500',
                         'alice soft nofile 250'],
          invalid_limits: []
        }
      )
  end

  it do
    is_expected.to render_file('/etc/security/limits.d/alice.conf')
      .with_content(
        <<-EOF
# Generated by Chef for node limits-test-node
# Local modifications will be overwritten!

alice hard nofile 500
alice soft nofile 250

# End of file
      EOF
      )
  end

  it { is_expected.to delete_limits_config('stanley') }
  it { is_expected.not_to create_limits_config('stanley') }
  it { is_expected.to delete_file('/etc/security/limits.d/stanley.conf') }
end
