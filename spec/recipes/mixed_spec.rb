require 'spec_helper'

describe 'limits_test_cookbook::mixed' do
  subject do
    ChefSpec::SoloRunner.new(step_into: %w(limits_config) do |node|
      allow(node).to receive(:name).and_return('limits-test-node')
    end.converge(described_recipe)
  end

  it do
    is_expected.to create_limits_config('mixed').with(
      limits: [
        { domain: 'a', type: 'hard', item: 'nofile', value: 123 },
        { domain: 'b', type: '-', item: 'nice', value: 456 },
        { domain: 'c', type: 'hard', item: 'niceeee', value: 123 },
        { domain: 'd', type: 'softish', item: 'nproc', value: 456 }
      ]
    )
  end

  it do
    is_expected.to create_directory('conf directory for mixed')
      .with(
        path: '/etc/security/limits.d',
        owner: 'root',
        group: 'root',
        mode: 0o755,
        recursive: true
      )
  end

  it do
    is_expected.to create_template('/etc/security/limits.d/mixed.conf')
      .with(
        cookbook: 'limits',
        source: 'limits.d.conf.erb',
        owner: 'root',
        group: 'root',
        mode: 0o644,
        variables: {
          valid_limits: ['a hard nofile 123',
                         'b -    nice   456'],
          invalid_limits: ['c hard    niceeee 123',
                           'd softish nproc   456']
        }
      )
  end

  it do
    is_expected.to render_file('/etc/security/limits.d/mixed.conf')
      .with_content(
        <<-EOF
# Generated by Chef for node limits-test-node
# Local modifications will be overwritten!

a hard nofile 123
b -    nice   456

# The following limits were detected as invalid by Chef
# c hard    niceeee 123
# d softish nproc   456

# End of file
      EOF
      )
  end
end
