require 'spec_helper'

describe 'limits_test_cookbook::sanitized' do
  subject do
    ChefSpec::SoloRunner.new(step_into: %w[limits_config]) do |node|
      allow(node).to receive(:name).and_return('limits-test-node')
    end.converge(described_recipe)
  end

  it do
    is_expected.to create_limits_config('sanitize me!').with(
      limits: [
        { domain: 'a', type: 'hard', item: 'nofile', value: 50_000 },
        { domain: 'b', type: '-', item: 'nice', value: 5_000 },
        { domain: 'user1', type: 'soft', item: 'priority', value: 500 }
      ]
    )
  end

  it do
    is_expected.to create_directory('conf directory for sanitize me!')
      .with(
        path: '/etc/security/limits.d',
        owner: 'root',
        group: 'root',
        mode: 0o755,
        recursive: true
      )
  end

  it do
    is_expected.to create_template('/etc/security/limits.d/sanitize_me_.conf')
      .with(
        cookbook: 'limits',
        source: 'limits.d.conf.erb',
        owner: 'root',
        group: 'root',
        mode: 0o644,
        variables: {
          valid_limits: ['a     hard nofile   50000',
                         'b     -    nice     5000',
                         'user1 soft priority 500'],
          invalid_limits: []
        }
      )
  end

  it do
    is_expected.to render_file('/etc/security/limits.d/sanitize_me_.conf')
      .with_content(
        <<-EOF
# Generated by Chef for node limits-test-node
# Local modifications will be overwritten!

a     hard nofile   50000
b     -    nice     5000
user1 soft priority 500

# End of file
      EOF
      )
  end
end
